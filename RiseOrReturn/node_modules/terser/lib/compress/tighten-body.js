import{AST_Array,AST_Arrow,AST_Assign,AST_Await,AST_Binary,AST_Block,AST_BlockStatement,AST_Break,AST_Call,AST_Case,AST_Catch,AST_Chain,AST_Class,AST_Conditional,AST_Const,AST_Constant,AST_Continue,AST_Debugger,AST_Default,AST_Definitions,AST_Defun,AST_Destructuring,AST_Directive,AST_Dot,AST_DWLoop,AST_EmptyStatement,AST_Exit,AST_Expansion,AST_Export,AST_Finally,AST_For,AST_ForIn,AST_If,AST_Import,AST_IterationStatement,AST_Lambda,AST_Let,AST_LoopControl,AST_Node,AST_Number,AST_Object,AST_ObjectKeyVal,AST_PropAccess,AST_RegExp,AST_Return,AST_Scope,AST_Sequence,AST_SimpleStatement,AST_Sub,AST_Switch,AST_Symbol,AST_SymbolConst,AST_SymbolDeclaration,AST_SymbolDefun,AST_SymbolFunarg,AST_SymbolLambda,AST_SymbolLet,AST_SymbolRef,AST_SymbolVar,AST_This,AST_Try,AST_Unary,AST_UnaryPostfix,AST_UnaryPrefix,AST_Undefined,AST_Var,AST_VarDef,AST_With,AST_Yield,TreeTransformer,TreeWalker,walk,walk_abort,_NOINLINE}from"../ast.js";import{make_node,MAP,member,remove,has_annotation}from"../utils/index.js";import{pure_prop_access_globals}from"./native-objects.js";import{lazy_op,unary_side_effects,is_modified,is_lhs,aborts}from"./inference.js";import{WRITE_ONLY,clear_flag}from"./compressor-flags.js";import{make_sequence,merge_sequence,maintain_this_binding,is_func_expr,is_identifier_atom,is_ref_of,can_be_evicted_from_block,as_statement_array}from"./common.js";function loop_body(e){return e instanceof AST_IterationStatement&&e.body instanceof AST_BlockStatement?e.body:e}function is_lhs_read_only(e){if(e instanceof AST_This)return!0;if(e instanceof AST_SymbolRef)return e.definition().orig[0]instanceof AST_SymbolLambda;if(e instanceof AST_PropAccess){if((e=e.expression)instanceof AST_SymbolRef){if(e.is_immutable())return!1;e=e.fixed_value()}return!e||!(e instanceof AST_RegExp)&&(e instanceof AST_Constant||is_lhs_read_only(e))}return!1}export function trim_unreachable_code(e,n,i){walk(n,(t=>t instanceof AST_Var?(t.remove_initializers(),i.push(t),!0):t instanceof AST_Defun&&(t===n||!e.has_directive("use strict"))?(i.push(t===n?t:make_node(AST_Var,t,{definitions:[make_node(AST_VarDef,t,{name:make_node(AST_SymbolVar,t.name,t.name),value:null})]})),!0):t instanceof AST_Export||t instanceof AST_Import?(i.push(t),!0):t instanceof AST_Scope||void 0))}export function tighten_body(e,n){var i,t,o=n.find_parent(AST_Scope).get_defun_scope();!function(){var e=n.self(),a=0;do{if(e instanceof AST_Catch||e instanceof AST_Finally)a++;else if(e instanceof AST_IterationStatement)i=!0;else{if(e instanceof AST_Scope){o=e;break}e instanceof AST_Try&&(t=!0)}}while(e=n.parent(a++))}();var a,r=10;do{a=!1,f(e),n.option("dead_code")&&_(e,n),n.option("if_return")&&c(e,n),n.sequences_limit>0&&(S(e,n),T(e,n)),n.option("join_vars")&&m(e),n.option("collapse_vars")&&s(e,n)}while(a&&r-- >0);function s(e,n){if(o.pinned())return e;for(var r,s=[],f=e.length,c=new TreeTransformer((function(e){if(x)return e;if(!k)return e!==l[S]?e:++S<l.length?R(e):(k=!0,(u=q(e,0))===e&&(x=!0),e);var i,o=c.parent();if(e instanceof AST_Assign&&(e.logical||"="!=e.operator&&d.equivalent_to(e.left))||e instanceof AST_Await||e instanceof AST_Call&&d instanceof AST_PropAccess&&d.equivalent_to(e.expression)||e instanceof AST_Debugger||e instanceof AST_Destructuring||e instanceof AST_Expansion&&e.expression instanceof AST_Symbol&&(e.expression instanceof AST_This||e.expression.definition().references.length>1)||e instanceof AST_IterationStatement&&!(e instanceof AST_For)||e instanceof AST_LoopControl||e instanceof AST_Try||e instanceof AST_With||e instanceof AST_Yield||e instanceof AST_Export||e instanceof AST_Class||o instanceof AST_For&&e!==o.init||!y&&e instanceof AST_SymbolRef&&!e.is_declared(n)&&!pure_prop_access_globals.has(e)||e instanceof AST_SymbolRef&&o instanceof AST_Call&&has_annotation(o,_NOINLINE))return x=!0,e;if(m||v&&y||!(o instanceof AST_Binary&&lazy_op.has(o.operator)&&o.left!==e||o instanceof AST_Conditional&&o.condition!==e||o instanceof AST_If&&o.condition!==e)||(m=o),C&&!(e instanceof AST_SymbolDeclaration)&&d.equivalent_to(e)&&!function(e,n){for(const{def:i}of n.values()){let n=e;for(;n&&n!==i.scope;){let e=n.variables.get(i.name);if(e&&e!==i)return!0;n=n.parent_scope}}return!1}(e.scope,p)){if(m)return x=!0,e;if(is_lhs(e,o))return T&&D++,e;if(D++,T&&A instanceof AST_VarDef)return e;if(a=x=!0,A instanceof AST_UnaryPostfix)return make_node(AST_UnaryPrefix,A,A);if(A instanceof AST_VarDef){var r=A.name.definition(),s=A.value;return r.references.length-r.replaced!=1||n.exposed(r)?make_node(AST_Assign,A,{operator:"=",logical:!1,left:make_node(AST_SymbolRef,A.name,A.name),right:s}):(r.replaced++,g&&is_identifier_atom(s)?s.transform(n):maintain_this_binding(o,e,s))}return clear_flag(A,WRITE_ONLY),A}return(e instanceof AST_Call||e instanceof AST_Exit&&(b||d instanceof AST_PropAccess||W(d))||e instanceof AST_PropAccess&&(b||e.expression.may_throw_on_access(n))||e instanceof AST_SymbolRef&&(p.has(e.name)&&p.get(e.name).modified||b&&W(e))||e instanceof AST_VarDef&&e.value&&(p.has(e.name.name)||b&&W(e.name))||(i=is_lhs(e.left,e))&&(i instanceof AST_PropAccess||p.has(i.name))||h&&(t?e.has_side_effects(n):z(e)))&&(u=e,e instanceof AST_Scope&&(x=!0)),R(e)}),(function(e){x||(u===e&&(x=!0),m===e&&(m=null))})),_=new TreeTransformer((function(e){if(x)return e;if(!k){if(e!==l[S])return e;if(++S<l.length)return;return k=!0,e}return e instanceof AST_SymbolRef&&e.name==w.name?(--D||(x=!0),is_lhs(e,_.parent())?e:(w.replaced++,T.replaced--,A.value)):e instanceof AST_Default||e instanceof AST_Scope?e:void 0}));--f>=0;){0==f&&n.option("unused")&&V();var l=[];for(B(e[f]);s.length>0;){l=s.pop();var S=0,A=l[l.length-1],T=null,u=null,m=null,d=L(A);if(d&&!is_lhs_read_only(d)&&!d.has_side_effects(n)){var p=F(A),v=U(d);d instanceof AST_SymbolRef&&p.set(d.name,{def:d.definition(),modified:!1});var b=Y(A),y=O(),h=A.may_throw(n),g=A.name instanceof AST_SymbolFunarg,k=g,x=!1,D=0,C=!r||!k;if(!C){for(var E=n.self().argnames.lastIndexOf(A.name)+1;!x&&E<r.length;E++)r[E].transform(c);C=!0}for(var I=f;!x&&I<e.length;I++)e[I].transform(c);if(T){var w=A.name.definition();if(x&&w.references.length-w.replaced>D)D=!1;else{x=!1,S=0,k=g;for(I=f;!x&&I<e.length;I++)e[I].transform(_);T.single_use=!1}}D&&!N(A)&&e.splice(f,1)}}}function R(e){if(e instanceof AST_Scope)return e;if(e instanceof AST_Switch){e.expression=e.expression.transform(c);for(var n=0,i=e.body.length;!x&&n<i;n++){var t=e.body[n];if(t instanceof AST_Case){if(!k){if(t!==l[S])continue;S++}if(t.expression=t.expression.transform(c),!y)break}}return x=!0,e}}function P(e,n,i){var t=!1,a=!(e instanceof AST_Arrow);return n.walk(new TreeWalker((function(n,r){if(t)return!0;if(n instanceof AST_SymbolRef&&(e.variables.has(n.name)||function(e,n){if(e.global)return!1;let i=e.scope;for(;i&&i!==n;){if(i.variables.has(e.name))return!0;i=i.parent_scope}return!1}(n.definition(),e))){var s=n.definition().scope;if(s!==o)for(;s=s.parent_scope;)if(s===o)return!0;return t=!0}if((i||a)&&n instanceof AST_This)return t=!0;if(n instanceof AST_Scope&&!(n instanceof AST_Arrow)){var f=a;return a=!1,r(),a=f,!0}}))),t}function V(){var e,i=n.self();if(is_func_expr(i)&&!i.name&&!i.uses_arguments&&!i.pinned()&&(e=n.parent())instanceof AST_Call&&e.expression===i&&e.args.every((e=>!(e instanceof AST_Expansion)))){var t=n.has_directive("use strict");t&&!member(t,i.body)&&(t=!1);var o=i.argnames.length;r=e.args.slice(o);for(var a=new Set,f=o;--f>=0;){var c=i.argnames[f],_=e.args[f];const o=c.definition&&c.definition();if(!(o&&o.orig.length>1)&&(r.unshift(make_node(AST_VarDef,c,{name:c,value:_})),!a.has(c.name)))if(a.add(c.name),c instanceof AST_Expansion){var l=e.args.slice(f);l.every((e=>!P(i,e,t)))&&s.unshift([make_node(AST_VarDef,c,{name:c.expression,value:make_node(AST_Array,e,{elements:l})})])}else _?(_ instanceof AST_Lambda&&_.pinned()||P(i,_,t))&&(_=null):_=make_node(AST_Undefined,c).transform(n),_&&s.unshift([make_node(AST_VarDef,c,{name:c,value:_})])}}}function B(e){if(l.push(e),e instanceof AST_Assign)e.left.has_side_effects(n)||e.right instanceof AST_Chain||s.push(l.slice()),B(e.right);else if(e instanceof AST_Binary)B(e.left),B(e.right);else if(e instanceof AST_Call&&!has_annotation(e,_NOINLINE))B(e.expression),e.args.forEach(B);else if(e instanceof AST_Case)B(e.expression);else if(e instanceof AST_Conditional)B(e.condition),B(e.consequent),B(e.alternative);else if(e instanceof AST_Definitions){var i=e.definitions.length,t=i-200;for(t<0&&(t=0);t<i;t++)B(e.definitions[t])}else e instanceof AST_DWLoop?(B(e.condition),e.body instanceof AST_Block||B(e.body)):e instanceof AST_Exit?e.value&&B(e.value):e instanceof AST_For?(e.init&&B(e.init),e.condition&&B(e.condition),e.step&&B(e.step),e.body instanceof AST_Block||B(e.body)):e instanceof AST_ForIn?(B(e.object),e.body instanceof AST_Block||B(e.body)):e instanceof AST_If?(B(e.condition),e.body instanceof AST_Block||B(e.body),!e.alternative||e.alternative instanceof AST_Block||B(e.alternative)):e instanceof AST_Sequence?e.expressions.forEach(B):e instanceof AST_SimpleStatement?B(e.body):e instanceof AST_Switch?(B(e.expression),e.body.forEach(B)):e instanceof AST_Unary?"++"!=e.operator&&"--"!=e.operator||s.push(l.slice()):e instanceof AST_VarDef&&(!e.value||e.value instanceof AST_Chain||(s.push(l.slice()),B(e.value)));l.pop()}function q(e,n,i){var t=c.parent(n);return t instanceof AST_Assign?!i||t.logical||t.left instanceof AST_PropAccess||p.has(t.left.name)?e:q(t,n+1,i):t instanceof AST_Binary?!i||lazy_op.has(t.operator)&&t.left!==e?e:q(t,n+1,i):t instanceof AST_Call||t instanceof AST_Case?e:t instanceof AST_Conditional?i&&t.condition===e?q(t,n+1,i):e:t instanceof AST_Definitions?q(t,n+1,!0):t instanceof AST_Exit?i?q(t,n+1,i):e:t instanceof AST_If?i&&t.condition===e?q(t,n+1,i):e:t instanceof AST_IterationStatement?e:t instanceof AST_Sequence?q(t,n+1,t.tail_node()!==e):t instanceof AST_SimpleStatement?q(t,n+1,!0):t instanceof AST_Switch||t instanceof AST_VarDef?e:null}function L(e){if(e instanceof AST_Assign&&e.logical)return!1;if(!(e instanceof AST_VarDef&&e.name instanceof AST_SymbolDeclaration)){const n=e instanceof AST_Assign?e.left:e.expression;return!is_ref_of(n,AST_SymbolConst)&&!is_ref_of(n,AST_SymbolLet)&&n}var i=e.name.definition();if(member(e.name,i.orig)){var t=i.references.length-i.replaced;if(t)return i.orig.length-i.eliminated>1&&!(e.name instanceof AST_SymbolFunarg)||(t>1?function(e){var n=e.value;if(n instanceof AST_SymbolRef&&"arguments"!=n.name){var i=n.definition();if(!i.undeclared)return T=i}}(e):!n.exposed(i))?make_node(AST_SymbolRef,e.name,e.name):void 0}}function j(e){return e instanceof AST_Assign?e.right:e.value}function F(e){var i=new Map;if(e instanceof AST_Unary)return i;var t=new TreeWalker((function(e){for(var o=e;o instanceof AST_PropAccess;)o=o.expression;if(o instanceof AST_SymbolRef){const a=i.get(o.name);a&&a.modified||i.set(o.name,{def:o.definition(),modified:is_modified(n,t,e,e,0)})}}));return j(e).walk(t),i}function N(i){if(i.name instanceof AST_SymbolFunarg){var t=n.parent(),o=n.self().argnames,a=o.indexOf(i.name);if(a<0)t.args.length=Math.min(t.args.length,o.length-1);else{var r=t.args;r[a]&&(r[a]=make_node(AST_Number,r[a],{value:0}))}return!0}var s=!1;return e[f].transform(new TreeTransformer((function(e,n,t){return s?e:e===i||e.body===i?(s=!0,e instanceof AST_VarDef?(e.value=e.name instanceof AST_SymbolConst?make_node(AST_Undefined,e.value):null,e):t?MAP.skip:null):void 0}),(function(e){if(e instanceof AST_Sequence)switch(e.expressions.length){case 0:return null;case 1:return e.expressions[0]}})))}function U(e){for(;e instanceof AST_PropAccess;)e=e.expression;return e instanceof AST_SymbolRef&&e.definition().scope===o&&!(i&&(p.has(e.name)||A instanceof AST_Unary||A instanceof AST_Assign&&!A.logical&&"="!=A.operator))}function Y(e){return e instanceof AST_Unary?unary_side_effects.has(e.operator):j(e).has_side_effects(n)}function O(){if(b)return!1;if(T)return!0;if(d instanceof AST_SymbolRef){var e=d.definition();if(e.references.length-e.replaced==(A instanceof AST_VarDef?1:2))return!0}return!1}function W(e){if(!e.definition)return!0;var n=e.definition();return!(1==n.orig.length&&n.orig[0]instanceof AST_SymbolDefun)&&(n.scope.get_defun_scope()!==o||!n.references.every((e=>{var n=e.scope.get_defun_scope();return"Scope"==n.TYPE&&(n=n.parent_scope),n===o})))}function z(e,n){if(e instanceof AST_Assign)return z(e.left,!0);if(e instanceof AST_Unary)return z(e.expression,!0);if(e instanceof AST_VarDef)return e.value&&z(e.value);if(n){if(e instanceof AST_Dot)return z(e.expression,!0);if(e instanceof AST_Sub)return z(e.expression,!0);if(e instanceof AST_SymbolRef)return e.definition().scope!==o}return!1}}function f(e){for(var n=[],i=0;i<e.length;){var t=e[i];t instanceof AST_BlockStatement&&t.body.every(can_be_evicted_from_block)?(a=!0,f(t.body),e.splice(i,1,...t.body),i+=t.body.length):t instanceof AST_EmptyStatement?(a=!0,e.splice(i,1)):t instanceof AST_Directive?n.indexOf(t.value)<0?(i++,n.push(t.value)):(a=!0,e.splice(i,1)):i++}}function c(e,n){for(var i=n.self(),t=function(e){for(var n=0,i=e.length;--i>=0;){var t=e[i];if(t instanceof AST_If&&t.body instanceof AST_Return&&++n>1)return!0}return!1}(e),o=i instanceof AST_Lambda,r=e.length;--r>=0;){var s=e[r],f=p(r),c=e[f];if(o&&!c&&s instanceof AST_Return){if(!s.value){a=!0,e.splice(r,1);continue}if(s.value instanceof AST_UnaryPrefix&&"void"==s.value.operator){a=!0,e[r]=make_node(AST_SimpleStatement,s,{body:s.value.expression});continue}}if(s instanceof AST_If){var _;if(u(_=aborts(s.body))){_.label&&remove(_.label.thedef.references,_),a=!0,(s=s.clone()).condition=s.condition.negate(n);var S=d(s.body,_);s.body=make_node(AST_BlockStatement,s,{body:as_statement_array(s.alternative).concat(m())}),s.alternative=make_node(AST_BlockStatement,s,{body:S}),e[r]=s.transform(n);continue}if(u(_=aborts(s.alternative))){_.label&&remove(_.label.thedef.references,_),a=!0,(s=s.clone()).body=make_node(AST_BlockStatement,s.body,{body:as_statement_array(s.body).concat(m())});S=d(s.alternative,_);s.alternative=make_node(AST_BlockStatement,s.alternative,{body:S}),e[r]=s.transform(n);continue}}if(s instanceof AST_If&&s.body instanceof AST_Return){var A=s.body.value;if(!A&&!s.alternative&&(o&&!c||c instanceof AST_Return&&!c.value)){a=!0,e[r]=make_node(AST_SimpleStatement,s.condition,{body:s.condition});continue}if(A&&!s.alternative&&c instanceof AST_Return&&c.value){a=!0,(s=s.clone()).alternative=c,e[r]=s.transform(n),e.splice(f,1);continue}if(A&&!s.alternative&&(!c&&o&&t||c instanceof AST_Return)){a=!0,(s=s.clone()).alternative=c||make_node(AST_Return,s,{value:null}),e[r]=s.transform(n),c&&e.splice(f,1);continue}var T=e[v(r)];if(n.option("sequences")&&o&&!s.alternative&&T instanceof AST_If&&T.body instanceof AST_Return&&p(f)==e.length&&c instanceof AST_SimpleStatement){a=!0,(s=s.clone()).alternative=make_node(AST_BlockStatement,c,{body:[c,make_node(AST_Return,c,{value:null})]}),e[r]=s.transform(n),e.splice(f,1);continue}}}function u(t){if(!t)return!1;for(var a=r+1,s=e.length;a<s;a++){var f=e[a];if(f instanceof AST_Const||f instanceof AST_Let)return!1}var c=t instanceof AST_LoopControl?n.loopcontrol_target(t):null;return t instanceof AST_Return&&o&&function(e){return!e||e instanceof AST_UnaryPrefix&&"void"==e.operator}(t.value)||t instanceof AST_Continue&&i===loop_body(c)||t instanceof AST_Break&&c instanceof AST_BlockStatement&&i===c}function m(){var n=e.slice(r+1);return e.length=r+1,n.filter((function(n){return!(n instanceof AST_Defun)||(e.push(n),!1)}))}function d(e,n){var i=as_statement_array(e).slice(0,-1);return n.value&&i.push(make_node(AST_SimpleStatement,n.value,{body:n.value.expression})),i}function p(n){for(var i=n+1,t=e.length;i<t;i++){var o=e[i];if(!(o instanceof AST_Var&&l(o)))break}return i}function v(n){for(var i=n;--i>=0;){var t=e[i];if(!(t instanceof AST_Var&&l(t)))break}return i}}function _(e,n){for(var i,t=n.self(),o=0,r=0,s=e.length;o<s;o++){var f=e[o];if(f instanceof AST_LoopControl){var c=n.loopcontrol_target(f);f instanceof AST_Break&&!(c instanceof AST_IterationStatement)&&loop_body(c)===t||f instanceof AST_Continue&&loop_body(c)===t?f.label&&remove(f.label.thedef.references,f):e[r++]=f}else e[r++]=f;if(aborts(f)){i=e.slice(o+1);break}}e.length=r,a=r!=s,i&&i.forEach((function(i){trim_unreachable_code(n,i,e)}))}function l(e){return e.definitions.every((e=>!e.value))}function S(e,n){if(!(e.length<2)){for(var i=[],t=0,o=0,r=e.length;o<r;o++){var s=e[o];if(s instanceof AST_SimpleStatement){i.length>=n.sequences_limit&&c();var f=s.body;i.length>0&&(f=f.drop_side_effect_free(n)),f&&merge_sequence(i,f)}else s instanceof AST_Definitions&&l(s)||s instanceof AST_Defun||c(),e[t++]=s}c(),e.length=t,t!=r&&(a=!0)}function c(){if(i.length){var n=make_sequence(i[0],i);e[t++]=make_node(AST_SimpleStatement,n,{body:n}),i=[]}}}function A(e,n){if(!(e instanceof AST_BlockStatement))return e;for(var i=null,t=0,o=e.body.length;t<o;t++){var a=e.body[t];if(a instanceof AST_Var&&l(a))n.push(a);else{if(i)return!1;i=a}}return i}function T(e,n){function i(e){o--,a=!0;var i=t.body;return make_sequence(i,[i,e]).transform(n)}for(var t,o=0,r=0;r<e.length;r++){var s=e[r];if(t)if(s instanceof AST_Exit)s.value=i(s.value||make_node(AST_Undefined,s).transform(n));else if(s instanceof AST_For){if(!(s.init instanceof AST_Definitions)){walk(t.body,(e=>e instanceof AST_Scope||(e instanceof AST_Binary&&"in"===e.operator?walk_abort:void 0)))||(s.init?s.init=i(s.init):(s.init=t.body,o--,a=!0))}}else s instanceof AST_ForIn?s.init instanceof AST_Const||s.init instanceof AST_Let||(s.object=i(s.object)):s instanceof AST_If?s.condition=i(s.condition):(s instanceof AST_Switch||s instanceof AST_With)&&(s.expression=i(s.expression));if(n.option("conditionals")&&s instanceof AST_If){var f=[],c=A(s.body,f),_=A(s.alternative,f);if(!1!==c&&!1!==_&&f.length>0){var l=f.length;f.push(make_node(AST_If,s,{condition:s.condition,body:c||make_node(AST_EmptyStatement,s.body),alternative:_})),f.unshift(o,1),[].splice.apply(e,f),r+=l,o+=l+1,t=null,a=!0;continue}}e[o++]=s,t=s instanceof AST_SimpleStatement?s:null}e.length=o}function u(e,i){if(e instanceof AST_Definitions){var t,a=e.definitions[e.definitions.length-1];if(a.value instanceof AST_Object)if(i instanceof AST_Assign&&!i.logical?t=[i]:i instanceof AST_Sequence&&(t=i.expressions.slice()),t){var r=!1;do{var s=t[0];if(!(s instanceof AST_Assign))break;if("="!=s.operator)break;if(!(s.left instanceof AST_PropAccess))break;var f=s.left.expression;if(!(f instanceof AST_SymbolRef))break;if(a.name.name!=f.name)break;if(!s.right.is_constant_expression(o))break;var c=s.left.property;if(c instanceof AST_Node&&(c=c.evaluate(n)),c instanceof AST_Node)break;c=""+c;var _=n.option("ecma")<2015&&n.has_directive("use strict")?function(e){return e.key!=c&&e.key&&e.key.name!=c}:function(e){return e.key&&e.key.name!=c};if(!a.value.properties.every(_))break;var l=a.value.properties.filter((function(e){return e.key===c}))[0];l?l.value=new AST_Sequence({start:l.start,expressions:[l.value.clone(),s.right.clone()],end:l.end}):a.value.properties.push(make_node(AST_ObjectKeyVal,s,{key:c,value:s.right})),t.shift(),r=!0}while(t.length);return r&&t}}}function m(e){for(var n,i=0,t=-1,o=e.length;i<o;i++){var r=e[i],s=e[t];if(r instanceof AST_Definitions)s&&s.TYPE==r.TYPE?(s.definitions=s.definitions.concat(r.definitions),a=!0):n&&n.TYPE==r.TYPE&&l(r)?(n.definitions=n.definitions.concat(r.definitions),a=!0):(e[++t]=r,n=r);else if(r instanceof AST_Exit)r.value=c(r.value);else if(r instanceof AST_For){(f=u(s,r.init))?(a=!0,r.init=f.length?make_sequence(r.init,f):null,e[++t]=r):s instanceof AST_Var&&(!r.init||r.init.TYPE==s.TYPE)?(r.init&&(s.definitions=s.definitions.concat(r.init.definitions)),r.init=s,e[t]=r,a=!0):n&&r.init&&n.TYPE==r.init.TYPE&&l(r.init)?(n.definitions=n.definitions.concat(r.init.definitions),r.init=null,e[++t]=r,a=!0):e[++t]=r}else if(r instanceof AST_ForIn)r.object=c(r.object);else if(r instanceof AST_If)r.condition=c(r.condition);else if(r instanceof AST_SimpleStatement){var f;if(f=u(s,r.body)){if(a=!0,!f.length)continue;r.body=make_sequence(r.body,f)}e[++t]=r}else r instanceof AST_Switch||r instanceof AST_With?r.expression=c(r.expression):e[++t]=r}function c(n){e[++t]=r;var i=u(s,n);return i?(a=!0,i.length?make_sequence(n,i):n instanceof AST_Sequence?n.tail_node().left:n.left):n}e.length=t+1}}