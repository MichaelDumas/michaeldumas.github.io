import{AST_Array,AST_Atom,AST_Await,AST_BigInt,AST_Binary,AST_Block,AST_Call,AST_Catch,AST_Chain,AST_Class,AST_ClassProperty,AST_ConciseMethod,AST_Conditional,AST_Debugger,AST_Definitions,AST_Destructuring,AST_Directive,AST_Do,AST_Dot,AST_DotHash,AST_EmptyStatement,AST_Expansion,AST_Export,AST_Finally,AST_For,AST_ForIn,AST_ForOf,AST_If,AST_Import,AST_ImportMeta,AST_Jump,AST_LabeledStatement,AST_Lambda,AST_LoopControl,AST_NameMapping,AST_NewTarget,AST_Node,AST_Number,AST_Object,AST_ObjectGetter,AST_ObjectKeyVal,AST_ObjectProperty,AST_ObjectSetter,AST_PrefixedTemplateString,AST_PropAccess,AST_RegExp,AST_Sequence,AST_SimpleStatement,AST_String,AST_Super,AST_Switch,AST_SwitchBranch,AST_Symbol,AST_TemplateSegment,AST_TemplateString,AST_This,AST_Toplevel,AST_Try,AST_Unary,AST_VarDef,AST_While,AST_With,AST_Yield}from"./ast.js";const shallow_cmp=(o,t)=>null===o&&null===t||o.TYPE===t.TYPE&&o.shallow_cmp(t);export const equivalent_to=(o,t)=>{if(!shallow_cmp(o,t))return!1;const e=[o],p=[t],l=e.push.bind(e),s=p.push.bind(p);for(;e.length&&p.length;){const o=e.pop(),t=p.pop();if(!shallow_cmp(o,t))return!1;if(o._children_backwards(l),t._children_backwards(s),e.length!==p.length)return!1}return 0==e.length&&0==p.length};const mkshallow=o=>{const t=Object.keys(o).map((t=>{if("eq"===o[t])return`this.${t} === other.${t}`;if("exist"===o[t])return`(this.${t} == null ? other.${t} == null : this.${t} === other.${t})`;throw new Error(`mkshallow: Unexpected instruction: ${o[t]}`)})).join(" && ");return new Function("other","return "+t)},pass_through=()=>!0;AST_Node.prototype.shallow_cmp=function(){throw new Error("did not find a shallow_cmp function for "+this.constructor.name)},AST_Debugger.prototype.shallow_cmp=pass_through,AST_Directive.prototype.shallow_cmp=mkshallow({value:"eq"}),AST_SimpleStatement.prototype.shallow_cmp=pass_through,AST_Block.prototype.shallow_cmp=pass_through,AST_EmptyStatement.prototype.shallow_cmp=pass_through,AST_LabeledStatement.prototype.shallow_cmp=mkshallow({"label.name":"eq"}),AST_Do.prototype.shallow_cmp=pass_through,AST_While.prototype.shallow_cmp=pass_through,AST_For.prototype.shallow_cmp=mkshallow({init:"exist",condition:"exist",step:"exist"}),AST_ForIn.prototype.shallow_cmp=pass_through,AST_ForOf.prototype.shallow_cmp=pass_through,AST_With.prototype.shallow_cmp=pass_through,AST_Toplevel.prototype.shallow_cmp=pass_through,AST_Expansion.prototype.shallow_cmp=pass_through,AST_Lambda.prototype.shallow_cmp=mkshallow({is_generator:"eq",async:"eq"}),AST_Destructuring.prototype.shallow_cmp=mkshallow({is_array:"eq"}),AST_PrefixedTemplateString.prototype.shallow_cmp=pass_through,AST_TemplateString.prototype.shallow_cmp=pass_through,AST_TemplateSegment.prototype.shallow_cmp=mkshallow({value:"eq"}),AST_Jump.prototype.shallow_cmp=pass_through,AST_LoopControl.prototype.shallow_cmp=pass_through,AST_Await.prototype.shallow_cmp=pass_through,AST_Yield.prototype.shallow_cmp=mkshallow({is_star:"eq"}),AST_If.prototype.shallow_cmp=mkshallow({alternative:"exist"}),AST_Switch.prototype.shallow_cmp=pass_through,AST_SwitchBranch.prototype.shallow_cmp=pass_through,AST_Try.prototype.shallow_cmp=mkshallow({bcatch:"exist",bfinally:"exist"}),AST_Catch.prototype.shallow_cmp=mkshallow({argname:"exist"}),AST_Finally.prototype.shallow_cmp=pass_through,AST_Definitions.prototype.shallow_cmp=pass_through,AST_VarDef.prototype.shallow_cmp=mkshallow({value:"exist"}),AST_NameMapping.prototype.shallow_cmp=pass_through,AST_Import.prototype.shallow_cmp=mkshallow({imported_name:"exist",imported_names:"exist"}),AST_ImportMeta.prototype.shallow_cmp=pass_through,AST_Export.prototype.shallow_cmp=mkshallow({exported_definition:"exist",exported_value:"exist",exported_names:"exist",module_name:"eq",is_default:"eq"}),AST_Call.prototype.shallow_cmp=pass_through,AST_Sequence.prototype.shallow_cmp=pass_through,AST_PropAccess.prototype.shallow_cmp=pass_through,AST_Chain.prototype.shallow_cmp=pass_through,AST_Dot.prototype.shallow_cmp=mkshallow({property:"eq"}),AST_DotHash.prototype.shallow_cmp=mkshallow({property:"eq"}),AST_Unary.prototype.shallow_cmp=mkshallow({operator:"eq"}),AST_Binary.prototype.shallow_cmp=mkshallow({operator:"eq"}),AST_Conditional.prototype.shallow_cmp=pass_through,AST_Array.prototype.shallow_cmp=pass_through,AST_Object.prototype.shallow_cmp=pass_through,AST_ObjectProperty.prototype.shallow_cmp=pass_through,AST_ObjectKeyVal.prototype.shallow_cmp=mkshallow({key:"eq"}),AST_ObjectSetter.prototype.shallow_cmp=mkshallow({static:"eq"}),AST_ObjectGetter.prototype.shallow_cmp=mkshallow({static:"eq"}),AST_ConciseMethod.prototype.shallow_cmp=mkshallow({static:"eq",is_generator:"eq",async:"eq"}),AST_Class.prototype.shallow_cmp=mkshallow({name:"exist",extends:"exist"}),AST_ClassProperty.prototype.shallow_cmp=mkshallow({static:"eq"}),AST_Symbol.prototype.shallow_cmp=mkshallow({name:"eq"}),AST_NewTarget.prototype.shallow_cmp=pass_through,AST_This.prototype.shallow_cmp=pass_through,AST_Super.prototype.shallow_cmp=pass_through,AST_String.prototype.shallow_cmp=mkshallow({value:"eq"}),AST_Number.prototype.shallow_cmp=mkshallow({value:"eq"}),AST_BigInt.prototype.shallow_cmp=mkshallow({value:"eq"}),AST_RegExp.prototype.shallow_cmp=function(o){return this.value.flags===o.value.flags&&this.value.source===o.value.source},AST_Atom.prototype.shallow_cmp=pass_through;