import EventName from"../enums/EventName.js";import Player from"../entities/Player.js";import Direction from"../enums/Direction.js";import{canvas,CANVAS_HEIGHT,CANVAS_WIDTH,context,keys,timer}from"../globals.js";import Room from"./Room.js";import Tile from"./Tile.js";import Vector from"../../lib/Vector.js";import PlayerStateName from"../enums/PlayerStateName.js";export default class Dungeon{constructor(t){this.player=t,this.currentRoom=new Room(t),this.nextRoom=null,this.camera=new Vector,this.isShifting=!1,canvas.addEventListener(EventName.ShiftUp,(()=>this.beginShifting(new Vector(0,-CANVAS_HEIGHT)))),canvas.addEventListener(EventName.ShiftDown,(()=>this.beginShifting(new Vector(0,CANVAS_HEIGHT)))),canvas.addEventListener(EventName.ShiftLeft,(()=>this.beginShifting(new Vector(-CANVAS_WIDTH,0)))),canvas.addEventListener(EventName.ShiftRight,(()=>this.beginShifting(new Vector(CANVAS_WIDTH,0))))}update(t){this.currentRoom.update(t),this.nextRoom?.update(t),this.isShifting&&this.player.currentAnimation.update(t)}render(){context.save(),this.isShifting&&context.translate(-Math.floor(this.camera.x),-Math.floor(this.camera.y)),this.currentRoom.render(),this.nextRoom?.render(),context.restore()}beginShifting(t){this.isShifting=!0,this.currentRoom.isShifting=!0,this.player.roomShifting=!0,this.player.changeState(PlayerStateName.Walking),this.player.isInvulnerable=!0;const e=this.prepareRoomAndPlayerForShift(t);this.tweenRoomAndPlayer(t,e)}prepareRoomAndPlayerForShift(t){return this.nextRoom=new Room(this.player,this.isShifting),this.nextRoom.openBottomDoor(),this.nextRoom.adjacentOffset.set(t.x,t.y),this.getNewPlayerPosition(t)}getNewPlayerPosition(t){let e=new Vector(this.player.position.x,this.player.position.y);return t.x>0?e.x=CANVAS_WIDTH+(Room.RENDER_OFFSET_X+Tile.TILE_SIZE):t.x<0?e.x=-CANVAS_WIDTH+(Room.RENDER_OFFSET_X+Room.WIDTH*Tile.TILE_SIZE-Tile.TILE_SIZE-this.player.dimensions.x):t.y>0?e.y=CANVAS_HEIGHT+(Room.RENDER_OFFSET_Y+this.player.dimensions.y/2):e.y=-CANVAS_HEIGHT+Room.RENDER_OFFSET_Y+Room.HEIGHT*Tile.TILE_SIZE-Tile.TILE_SIZE-this.player.dimensions.y,e}tweenRoomAndPlayer(t,e){timer.tween(this.camera,["x","y"],[t.x,t.y],1,(()=>{timer.tween(this.player.position,["x","y"],[e.x,e.y],1,(()=>{this.finishShifting(t)}))}))}finishShifting(t){this.isShifting=!1,this.camera.set(0,0),this.resetRooms(),this.resetPlayer(t),this.currentRoom.closeDoors(),timer.wait(.01,(()=>{this.player.roomShifting=!1})),timer.wait(1,(()=>{this.player.isInvulnerable=!1}))}resetRooms(){this.currentRoom.isShifting=!1,this.nextRoom.isShifting=!1,this.currentRoom=this.nextRoom,this.nextRoom=null,this.currentRoom.adjacentOffset.set(0,0)}resetPlayer(t){t.y<0?(this.player.position.y=Room.RENDER_OFFSET_Y+Room.HEIGHT*Tile.TILE_SIZE-Tile.TILE_SIZE-this.player.dimensions.y,this.player.direction=Direction.Up):(this.player.position.y=Room.RENDER_OFFSET_Y+this.player.dimensions.y/2,this.player.direction=Direction.Down)}}