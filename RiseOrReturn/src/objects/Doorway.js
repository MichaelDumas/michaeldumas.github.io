import Vector from"../../lib/Vector.js";import Direction from"../enums/Direction.js";import EventName from"../enums/EventName.js";import GameObject from"./GameObject.js";import Room from"./Room.js";import Tile from"./Tile.js";import{canvas,sounds}from"../globals.js";import SoundName from"../enums/SoundName.js";export default class Doorway extends GameObject{static VERTICAL_WIDTH=16;static VERTICAL_HEIGHT=32;static HORIZONTAL_WIDTH=32;static HORIZONTAL_HEIGHT=16;static TOP_OPEN_SPRITES=[97,98,116,117];static BOTTOM_OPEN_SPRITES=[140,141,159,160];static LEFT_OPEN_SPRITES=[180,181,199,200];static RIGHT_OPEN_SPRITES=[171,172,190,191];static TOP_CLOSE_SPRITES=[136,137,155,156];static BOTTOM_CLOSE_SPRITES=[178,179,197,198];static LEFT_CLOSE_SPRITES=[218,219,237,238];static RIGHT_CLOSE_SPRITES=[173,174,192,193];static shiftUp=new Event(EventName.ShiftUp);static shiftDown=new Event(EventName.ShiftDown);static shiftLeft=new Event(EventName.ShiftLeft);static shiftRight=new Event(EventName.ShiftRight);constructor(i,t,o,s){super(i,t),this.direction=o,this.room=s,this.isOpen=!1,this.isCollidable=!0,this.openSprites=this.initializeOpenSprites(s.sprites),this.closeSprites=this.initializeCloseSprites(s.sprites),this.spriteLocations=this.initializeSpriteLocations(),this.sprites=this.closeSprites,this.renderPriority=-1}update(){this.renderPriority=this.room.isShifting?1:-1}render(i){this.sprites.forEach(((t,o)=>{t.render(this.spriteLocations[o].x+i.x,this.spriteLocations[o].y+i.y)}))}static getPositionFromDirection(i){const t=new Vector;return i===Direction.Left?t.set(Room.RENDER_OFFSET_X,Room.RENDER_OFFSET_Y+Room.HEIGHT/2*Tile.TILE_SIZE-Tile.TILE_SIZE/2):i===Direction.Right?t.set(Room.RENDER_OFFSET_X+Room.WIDTH*Tile.TILE_SIZE-Tile.TILE_SIZE,Room.RENDER_OFFSET_Y+Room.HEIGHT/2*Tile.TILE_SIZE-Tile.TILE_SIZE/2):i===Direction.Up?t.set(Room.RENDER_OFFSET_X+Room.WIDTH/2*Tile.TILE_SIZE-Tile.TILE_SIZE,Room.RENDER_OFFSET_Y):t.set(Room.RENDER_OFFSET_X+Room.WIDTH/2*Tile.TILE_SIZE-Tile.TILE_SIZE,Room.RENDER_OFFSET_Y+Room.HEIGHT*Tile.TILE_SIZE-Tile.TILE_SIZE),t}static getDimensionsFromDirection(i){const t=new Vector;return i===Direction.Left||i===Direction.Right?t.set(Doorway.VERTICAL_WIDTH,Doorway.VERTICAL_HEIGHT):(Direction.Up,t.set(Doorway.HORIZONTAL_WIDTH,Doorway.HORIZONTAL_HEIGHT)),t}initializeOpenSprites(i){const t=[];let o;return o=this.direction===Direction.Left?Doorway.LEFT_OPEN_SPRITES:this.direction===Direction.Right?Doorway.RIGHT_OPEN_SPRITES:this.direction===Direction.Up?Doorway.TOP_OPEN_SPRITES:Doorway.BOTTOM_OPEN_SPRITES,o.forEach((o=>{t.push(i[o])})),t}initializeCloseSprites(i){const t=[];let o;return o=this.direction===Direction.Left?Doorway.LEFT_CLOSE_SPRITES:this.direction===Direction.Right?Doorway.RIGHT_CLOSE_SPRITES:this.direction===Direction.Up?Doorway.TOP_CLOSE_SPRITES:Doorway.BOTTOM_CLOSE_SPRITES,o.forEach((o=>{t.push(i[o])})),t}initializeSpriteLocations(){const i=[];return this.direction===Direction.Left?(i.push(new Vector(this.position.x-Tile.TILE_SIZE,this.position.y)),i.push(new Vector(this.position.x,this.position.y)),i.push(new Vector(this.position.x-Tile.TILE_SIZE,this.position.y+Tile.TILE_SIZE)),i.push(new Vector(this.position.x,this.position.y+Tile.TILE_SIZE))):this.direction===Direction.Right?(i.push(new Vector(this.position.x,this.position.y)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y)),i.push(new Vector(this.position.x,this.position.y+Tile.TILE_SIZE)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y+Tile.TILE_SIZE))):this.direction===Direction.Up?(i.push(new Vector(this.position.x,this.position.y-Tile.TILE_SIZE)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y-Tile.TILE_SIZE)),i.push(new Vector(this.position.x,this.position.y)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y))):(i.push(new Vector(this.position.x,this.position.y)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y)),i.push(new Vector(this.position.x,this.position.y+Tile.TILE_SIZE)),i.push(new Vector(this.position.x+Tile.TILE_SIZE,this.position.y+Tile.TILE_SIZE))),i}open(){this.isOpen||(this.isOpen=!0,this.sprites=this.openSprites)}close(){this.isOpen&&(this.isOpen=!1,this.sprites=this.closeSprites,sounds.play(SoundName.Door))}onCollision(i){this.didPlayerCollide()&&(this.room.player.level+=1,this.room.player.canRise=!0,this.room.player.enemiesPerLevel++,this.room.player.level!=Room.WINNING_LEVEL?(super.onCollision(i),this.direction===Direction.Up?(i.position.x=this.position.x-5,canvas.dispatchEvent(Doorway.shiftUp)):this.direction===Direction.Down?(i.position.x=this.position.x+i.dimensions.x/2,canvas.dispatchEvent(Doorway.shiftDown)):this.direction===Direction.Left?(i.position.y=this.position.y,canvas.dispatchEvent(Doorway.shiftLeft)):(i.position.y=this.position.y,canvas.dispatchEvent(Doorway.shiftRight)),this.room.player.level%Room.BOSS_LEVEL_INCREMENT==0&&(this.room.player.maxHealth+=2)):this.room.player.gameWon=!0)}didPlayerCollide(){return this.didCollideWithEntity(this.room.player.hitbox)&&!this.room.isShifting&&this.isOpen&&this.direction===this.room.player.direction}}