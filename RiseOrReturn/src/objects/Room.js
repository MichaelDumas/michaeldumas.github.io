import{getRandomPositiveInteger,pickRandomElement}from"../../lib/RandomNumberHelpers.js";import Sprite from"../../lib/Sprite.js";import Vector from"../../lib/Vector.js";import EnemyFactory from"../entities/enemies/EnemyFactory.js";import Player from"../entities/Player.js";import Direction from"../enums/Direction.js";import EnemyType from"../enums/EnemyType.js";import ImageName from"../enums/ImageName.js";import{CANVAS_HEIGHT,CANVAS_WIDTH,images,timer}from"../globals.js";import Doorway from"./Doorway.js";import Food from"./Food.js";import Tile from"./Tile.js";import Potion from"./Potion.js";import Slime from"../entities/enemies/Slime.js";import RoomFactory from"./RoomFactory.js";import Barrier from"./Barrier.js";import Swarm from"../entities/enemies/Swarm.js";import BossFactory from"../entities/enemies/BossFactory.js";import BossType from"../enums/BossType.js";import Minotaur from"../entities/enemies/Minotaur.js";export default class Room{static WIDTH=CANVAS_WIDTH/Tile.TILE_SIZE-2;static HEIGHT=Math.floor(CANVAS_HEIGHT/Tile.TILE_SIZE)-2;static RENDER_OFFSET_X=(CANVAS_WIDTH-Room.WIDTH*Tile.TILE_SIZE)/2;static RENDER_OFFSET_Y=(CANVAS_HEIGHT-Room.HEIGHT*Tile.TILE_SIZE)/2;static TOP_EDGE=Room.RENDER_OFFSET_Y+Tile.TILE_SIZE;static BOTTOM_EDGE=CANVAS_HEIGHT-Room.RENDER_OFFSET_Y-Tile.TILE_SIZE;static LEFT_EDGE=Room.RENDER_OFFSET_X+Tile.TILE_SIZE;static RIGHT_EDGE=CANVAS_WIDTH-2*Tile.TILE_SIZE;static CENTER_X=Math.floor(Room.LEFT_EDGE+(Room.RIGHT_EDGE-Room.LEFT_EDGE)/2);static CENTER_Y=Math.floor(Room.TOP_EDGE+(Room.BOTTOM_EDGE-Room.TOP_EDGE)/2);static FOOD_SCALE=.5;static FOOD_CHANCE=8;static POTION_CHANCE=15;static BOSS_LEVEL_INCREMENT=10;static BOSS_ROOM_ID=3;static WINNING_LEVEL=101;constructor(e,t=!1){this.player=e,this.roomId=null,this.amountOfEnemies=e.enemiesPerLevel,this.dimensions=new Vector(Room.WIDTH,Room.HEIGHT),this.sprites=Sprite.generateSpritesFromSpriteSheet(images.get(ImageName.Tiles),Tile.TILE_SIZE,Tile.TILE_SIZE),this.tiles=RoomFactory.CreateRoom(this),this.doorways=this.generateDoorways(),this.objects=this.generateObjects(),this.entities=this.generateEntities(),this.renderQueue=this.buildRenderQueue(),this.adjacentOffset=new Vector,this.isShifting=t}update(e){this.renderQueue=this.buildRenderQueue(),this.cleanUpEntities(),this.cleanUpObjects(),this.updateEntities(e),this.updateObjects(e)}render(){this.renderTiles(),this.renderQueue.forEach((e=>{e instanceof Food?e.render(this.adjacentOffset.x,this.adjacentOffset.y,{x:Room.FOOD_SCALE,y:Room.FOOD_SCALE}):e.render(this.adjacentOffset)}))}buildRenderQueue(){return[...this.entities,...this.objects].sort(((e,t)=>{let i=0;const o=e.hitbox.position.y+e.hitbox.dimensions.y,s=t.hitbox.position.y+t.hitbox.dimensions.y;return i=e.renderPriority<t.renderPriority?-1:e.renderPriority>t.renderPriority?1:o<s?-1:1,i}))}cleanUpEntities(){this.entities=this.entities.filter((e=>!e.isDead))}cleanUpObjects(){this.objects=this.objects.filter((e=>!e.wasConsumed))}updateEntities(e){this.entities.forEach((t=>{t.health<=0&&(t instanceof Minotaur||(t.isDead=!0,t instanceof Slime&&(this.entities=t.spawnBabySlime(this.entities)),1==getRandomPositiveInteger(1,Room.FOOD_CHANCE)&&(1==getRandomPositiveInteger(1,Room.POTION_CHANCE)?this.objects=this.generatePotion(this.objects,t.position):this.objects=this.generateFood(this.objects,t.position)))),(!this.isShifting||this.isShifting&&t!==this.player)&&t.update(e),this.objects.forEach((e=>{e.didCollideWithEntity(t.hitbox)&&e.isCollidable&&(e instanceof Barrier&&t instanceof Swarm||e instanceof Barrier&&t instanceof Minotaur&&!t.isSolid||e.onCollision(t))})),this.objects.forEach((e=>{e.didCollideWithEntity(t.hitbox)&&e.isConsumable&&t instanceof Player&&e.onConsume(t)})),t!==this.player&&(t.didCollideWithEntity(this.player.swordHitbox)&&!t.isInvulnerable&&t.receiveDamage(this.player.damage),t.isDead||!this.player.didCollideWithEntity(t.hitbox)||this.player.isInvulnerable||(this.player.receiveDamage(t.damage),this.player.becomeInvulnerable()))})),1==this.entities.length&&this.openTopDoor()}updateObjects(e){this.objects.forEach((e=>{e.update()}))}renderTiles(){this.tiles.forEach((e=>{e.forEach((e=>{e.render(this.adjacentOffset)}))}))}generateEntities(){const e=[],t=Sprite.generateSpritesFromSpriteSheet(images.get(ImageName.Enemies),Tile.TILE_SIZE,Tile.TILE_SIZE);let i;if(this.player.level%Room.BOSS_LEVEL_INCREMENT==0&&this.player.level>1){this.tiles=RoomFactory.CreateRoom(this,Room.BOSS_ROOM_ID),this.objects=this.generateObjects();let t=Sprite.generateSpritesFromSpriteSheet(images.get(ImageName.Minotaur),Minotaur.WIDTH,Minotaur.HEIGHT);e.push(BossFactory.createInstance(BossType.Minotaur,t,this))}else for(let o=0;o<this.amountOfEnemies;o++)i=EnemyType[pickRandomElement(Object.keys(EnemyType))],e.push(EnemyFactory.createInstance(i,t,this));return e.push(this.player),e}generateObjects(){const e=[];let t;switch(this.roomId){case 0:t=RoomFactory.ROOM1_LAYOUT;break;case 1:t=RoomFactory.ROOM2_LAYOUT;break;case 2:t=RoomFactory.ROOM3_LAYOUT;break;case 3:t=RoomFactory.ROOM4_LAYOUT}for(let i=0;i<t.length;i++)if(RoomFactory.COLLIDABLE_SPRITES.includes(t[i])){let t=new Vector(Tile.TILE_SIZE,Tile.TILE_SIZE),o=Math.floor(i/this.tiles[0].length)*Tile.TILE_SIZE+RoomFactory.RENDER_OFFSET_Y,s=i%this.tiles[0].length*Tile.TILE_SIZE+RoomFactory.RENDER_OFFSET_X,r=new Vector(s,o);e.push(new Barrier(t,r,this))}return e.push(...this.doorways),e}generateDoorways(){const e=[];return e.push(new Doorway(Doorway.getDimensionsFromDirection(Direction.Up),Doorway.getPositionFromDirection(Direction.Up),Direction.Up,this)),e.push(new Doorway(Doorway.getDimensionsFromDirection(Direction.Down),Doorway.getPositionFromDirection(Direction.Down),Direction.Down,this)),e}openDoors(){this.doorways.forEach((e=>{e.open()}))}closeDoors(){this.doorways.forEach((e=>{e.close()}))}openTopDoor(){this.doorways.forEach((e=>{e.direction==Direction.Up&&e.open()}))}openBottomDoor(){this.doorways.forEach((e=>{e.direction==Direction.Down&&e.open()}))}generateFood(e,t){return e.push(new Food(new Vector(Food.WIDTH,Food.HEIGHT),t,this)),e}generatePotion(e,t){return e.push(new Potion(new Vector(Potion.WIDTH,Potion.HEIGHT),t,this)),e}}