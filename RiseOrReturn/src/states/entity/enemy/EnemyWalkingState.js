import Animation from"../../../../lib/Animation.js";import{didSucceedChance,getRandomPositiveInteger,pickRandomElement}from"../../../../lib/RandomNumberHelpers.js";import State from"../../../../lib/State.js";import Enemy from"../../../entities/enemies/Enemy.js";import Direction from"../../../enums/Direction.js";import EnemyStateName from"../../../enums/EnemyStateName.js";import{timer}from"../../../globals.js";import Room from"../../../objects/Room.js";export default class EnemyWalkingState extends State{static IDLE_CHANCE=.5;static MOVE_DURATION_MIN=2;static MOVE_DURATION_MAX=6;constructor(e,i){super(),this.enemy=e,this.animation=i}enter(){this.enemy.currentAnimation=this.animation[this.enemy.direction],this.reset(),this.startTimer()}update(e){this.move(e)}startTimer(){this.timer=timer.wait(this.moveDuration,(()=>this.decideMovement()))}decideMovement(){didSucceedChance(EnemyWalkingState.IDLE_CHANCE)?this.enemy.changeState(EnemyStateName.Idle):(this.reset(),this.startTimer())}reset(){this.enemy.direction=pickRandomElement([Direction.Up,Direction.Down,Direction.Left,Direction.Right]),this.enemy.currentAnimation=this.animation[this.enemy.direction],this.moveDuration=getRandomPositiveInteger(EnemyWalkingState.MOVE_DURATION_MIN,EnemyWalkingState.MOVE_DURATION_MAX)}move(e){this.enemy.direction===Direction.Down?(this.enemy.position.y+=this.enemy.speed*e,this.enemy.position.y+this.enemy.dimensions.y>Room.BOTTOM_EDGE&&(this.enemy.position.y=Room.BOTTOM_EDGE-this.enemy.dimensions.y,this.reset())):this.enemy.direction===Direction.Right?(this.enemy.position.x+=this.enemy.speed*e,this.enemy.position.x+this.enemy.dimensions.x>Room.RIGHT_EDGE&&(this.enemy.position.x=Room.RIGHT_EDGE-this.enemy.dimensions.x,this.reset())):this.enemy.direction===Direction.Up?(this.enemy.position.y-=this.enemy.speed*e,this.enemy.position.y<Room.TOP_EDGE-this.enemy.dimensions.y/2&&(this.enemy.position.y=Room.TOP_EDGE-this.enemy.dimensions.y/2,this.reset())):this.enemy.direction===Direction.Left&&(this.enemy.position.x-=this.enemy.speed*e,this.enemy.position.x<Room.LEFT_EDGE&&(this.enemy.position.x=Room.LEFT_EDGE,this.reset()))}}