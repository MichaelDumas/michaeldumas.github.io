import{getRandomPositiveInteger}from"../../../lib/RandomNumberHelpers.js";import StateMachine from"../../../lib/StateMachine.js";import EnemyStateName from"../../enums/EnemyStateName.js";import SoundName from"../../enums/SoundName.js";import{CANVAS_HEIGHT,sounds}from"../../globals.js";import Barrier from"../../objects/Barrier.js";import Room from"../../objects/Room.js";import Tile from"../../objects/Tile.js";import EnemyIdlingState from"../../states/entity/enemy/EnemyIdlingState.js";import EnemyWalkingState from"../../states/entity/enemy/EnemyWalkingState.js";import EnemyFollowState from"../../states/entity/enemy/EnemyFollowState.js";import GameEntity from"../GameEntity.js";import EnemyType from"../../enums/EnemyType.js";import MinotaurStateName from"../../enums/MinotaurStateName.js";import MinotaurCooldownState from"../../states/entity/enemy/MinotaurCooldownState.js";import MinotaurDeathState from"../../states/entity/enemy/MinotaurDeathState.js";import MinotaurSpinState from"../../states/entity/enemy/MinotaurSpinState.js";import MinotaurFollowState from"../../states/entity/enemy/MinotaurFollowState.js";import BossType from"../../enums/BossType.js";import RoomFactory from"../../objects/RoomFactory.js";export default class Enemy extends GameEntity{static WIDTH=16;static HEIGHT=16;constructor(t,e){super(),this.room=e,this.sprites=t,this.spawnEnemyRandomPosition(),this.dimensions.x=Enemy.WIDTH,this.dimensions.y=Enemy.HEIGHT,this.isInvulnerable=!1,this.sound=SoundName.HitEnemy,this.canSpin=!0,this.isSolid=!0}spawnEnemyRandomPosition(){for(var t=getRandomPositiveInteger(1,Room.WIDTH-1),e=getRandomPositiveInteger(1,Room.HEIGHT-2);RoomFactory.COLLIDABLE_SPRITES.includes(this.room.tiles[e-1][t].spriteId);)t=getRandomPositiveInteger(1,Room.WIDTH-1),e=getRandomPositiveInteger(1,Room.HEIGHT-2);this.position.x=this.room.tiles[e-1][t].canvasPosition.x,this.position.y=this.room.tiles[e-1][t].canvasPosition.y}render(t={x:0,y:0}){super.render(t)}receiveDamage(t){this.health-=t,sounds.stop(this.sound),sounds.play(this.sound)}initializeStateMachine(t,e){const o=new StateMachine;return o.add(EnemyStateName.Idle,new EnemyIdlingState(this,t[EnemyStateName.Idle])),o.add(EnemyStateName.Follow,new EnemyFollowState(this,t[EnemyStateName.Follow],this.room.player)),o.add(EnemyStateName.Moving,new EnemyWalkingState(this,t[EnemyStateName.Moving])),e==EnemyType.Swarm?o.change(EnemyStateName.Follow):o.change(EnemyStateName.Moving),o}}